
# [Full working game with grenade + cheat key 'K' to skip to wave 5]
import pygame
import sys
import random

pygame.init()

WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Platformer: Rescue the Princess at Wave 5")
clock = pygame.time.Clock()

FPS = 60
WORLD_WIDTH = 1600

GREEN       = (0, 255, 0)
RED         = (255, 0, 0)
YELLOW      = (255, 230, 0)
BLACK       = (0, 0, 0)
WHITE       = (255, 255, 255)
CLOUD_COLOR = (245, 245, 245)
JAIL_GRAY   = (100, 100, 100)

def load_image(path, size=None):
    try:
        img = pygame.image.load(path).convert_alpha()
        if size:
            img = pygame.transform.scale(img, size)
        return img
    except Exception as e:
        print(f"Error loading image at {path!r}: {e}")
        return None

background_img = load_image("background.jpg", (1600, HEIGHT))
if not background_img:
    background_img = pygame.Surface((1600, HEIGHT))
    background_img.fill((50, 50, 100))



player_img      = load_image(r"ex'\Boy with Slingshot\Idle\idle4.png",         (50, 50))
player_img_walk = load_image(r"ex'\Boy with Slingshot\Walk\Walk1.png",         (50, 50))
player_img_walk2 = load_image(r"ex'\Boy with Slingshot\Walk\Walk2.png",         (50, 50))
player_img_walk3 = load_image(r"ex'\Boy with Slingshot\Walk\Walk3.png",         (50, 50))
player_img_walk4 = load_image(r"ex'\Boy with Slingshot\Walk\Walk4.png",         (50, 50))
player_img_jump = load_image(r"ex'\Boy with Slingshot\Jump Attack\JumpAttack1.png", (50, 50))

if not player_img:
    player_img = pygame.Surface((50, 50)); player_img.fill(YELLOW)
if not player_img_walk:
    player_img_walk = pygame.Surface((50, 50)); player_img_walk.fill((200, 200, 0))
if not player_img_jump:
    player_img_jump = pygame.Surface((50, 50)); player_img_jump.fill((255, 150, 0))

princess_sheet = load_image("princess.png", (80, 80))
if not princess_sheet:
    princess_sheet = pygame.Surface((80, 80))
    princess_sheet.fill((255, 100, 200))

    castle_img = load_image("castle.png", (200, 200))
if not castle_img:
    castle_img = pygame.Surface((200, 200))
    castle_img.fill((100, 100, 255))

gravity = 1
jump_strength = -20
bullets = []
grenades = []
grenade_radius = 60

platforms = [
    pygame.Rect(0,    550, 800, 50),
    pygame.Rect(800,  550, 800, 50),
    pygame.Rect(150,  450, 200, 20),
    pygame.Rect(450,  350, 200, 20),
    pygame.Rect(100,  250, 150, 20),
    pygame.Rect(400,  150, 250, 20),
    pygame.Rect(900,  450, 200, 20),
    pygame.Rect(1100, 350, 200, 20),
    pygame.Rect(1300, 250, 150, 20),
    pygame.Rect(600,  200, 180, 20),
    pygame.Rect(1400, 300, 150, 20)
]

class Cloud:
    def __init__(self, x, y, scale, speed):
        self.x = x
        self.y = y
        self.scale = scale
        self.speed = speed
        r = int(20 * scale)
        self.circles = [
            (-r, 0, int(r * 0.9)),
            (0, -r // 2, int(r * 1.1)),
            (r, 0, int(r * 0.9)),
            (0, r // 2, int(r * 0.8))
        ]
    def update(self):
        self.x -= self.speed
        if self.x + int(60 * self.scale) < 0:
            self.x = WORLD_WIDTH + int(60 * self.scale)
    def draw(self, surface, camera_x):
        draw_x = self.x - camera_x * 0.5
        for dx, dy, rad in self.circles:
            cx = int(draw_x + dx)
            cy = int(self.y + dy)
            pygame.draw.circle(surface, CLOUD_COLOR, (cx, cy), rad)

clouds = [
    Cloud(100, 100, 1.0, 0.5),
    Cloud(400,  80, 1.2, 0.3),
    Cloud(700, 120, 0.8, 0.7),
    Cloud(1200,  50, 1.5, 0.2)
]

class Enemy(pygame.sprite.Sprite):
    def __init__(self, x, y, speed):
        super().__init__()
        face_img = load_image(r"ex'\Transparent PNG\2.png", (40, 40))
        if face_img:
            self.image = face_img
        else:
            self.image = pygame.Surface((40, 40))
            self.image.fill(YELLOW)
        self.rect = self.image.get_rect(topleft=(x, y))
        self.speed = speed
        self.vel_y = 0
        self.on_ground = False

    def update(self):
        if player.state == "alive":
            if self.rect.x < player.rect.x:
                self.rect.x += self.speed
            elif self.rect.x > player.rect.x:
                self.rect.x -= self.speed
        self.vel_y += gravity
        self.rect.y += self.vel_y
        self.on_ground = False
        for platform in platforms:
            if self.rect.colliderect(platform) and self.vel_y > 0:
                self.rect.bottom = platform.top
                self.vel_y = 0
                self.on_ground = True
                break

    def draw(self, surface, camera_x):
        surface.blit(self.image, (self.rect.x - camera_x, self.rect.y))

class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.orig_image = player_img
        self.image = self.orig_image
        self.rect = self.image.get_rect(center=(100, 150))
        self.vel_y = 0
        self.on_ground = False
        self.facing_right = True
        self.state = "alive"
        self.death_timer = 0
        self.game_over_displayed = False
        self.game_over_timer = 180
        self.grenade_cooldown = 0
    def start_dying(self):
        if self.state == "alive":
            self.state = "dying"
            self.death_timer = 20

    def update(self, keys):
        if self.state == "dead":
            return
        if self.state == "dying":
            self.handle_death_animation()
            return

        if keys[pygame.K_d]:
            for i in range (1):
                self.image = player_img_walk  
                self.image = player_img_walk2 
                self.image = player_img_walk3
                self.image = player_img_walk4  

            self.rect.x += 5
            self.facing_right = True
        elif keys[pygame.K_a]:
            self.image = player_img_walk
            self.rect.x -= 5
            self.facing_right = False
        else:
            self.image = player_img

        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > WORLD_WIDTH:
            self.rect.right = WORLD_WIDTH

        if keys[pygame.K_w] and self.on_ground:
            self.image = player_img_jump
            self.vel_y = jump_strength
            self.on_ground = False

        self.vel_y += gravity
        self.rect.y += self.vel_y

        self.on_ground = False
        for platform in platforms:
            if self.rect.colliderect(platform) and self.vel_y > 0:
                self.rect.bottom = platform.top
                self.vel_y = 0
                self.on_ground = True
                break

        if self.grenade_cooldown > 0:
            self.grenade_cooldown -= 1

    def handle_death_animation(self):
        if self.death_timer > 0:
            factor = self.death_timer / 20.0
            new_w = max(1, int(self.orig_image.get_width() * factor))
            new_h = max(1, int(self.orig_image.get_height() * factor))
            scaled = pygame.transform.scale(self.orig_image, (new_w, new_h))
            cx, cy = self.rect.center
            self.image = scaled
            self.rect = self.image.get_rect(center=(cx, cy))
            self.death_timer -= 1
        else:
            self.state = "dead"
            self.game_over_displayed = True

    def draw(self, surface, camera_x):
        if self.state == "dead":
            return
        surface.blit(self.image, (self.rect.x - camera_x, self.rect.y))

    def draw_game_over(self, surface):
        if self.game_over_displayed:
            font = pygame.font.SysFont(None, 32)
            lines = ["you lost!", "good boy", "Press ESC to quit or wait a moment."]
            y = HEIGHT // 3
            for line in lines:
                text = font.render(line, True, RED)
                screen.blit(text, (WIDTH // 2 - text.get_width() // 2, y))
                y += text.get_height() + 6

class Princess:
    def __init__(self, x, y):
        self.image = princess_sheet
        self.rect = self.image.get_rect(midbottom=(x, y))

    def draw(self, surface, camera_x):
        pos = (self.rect.x - camera_x, self.rect.y)
        surface.blit(self.image, pos)
        for i in range(0, self.rect.width, 15):
            pygame.draw.rect(surface, JAIL_GRAY, (pos[0] + i, pos[1] - 5, 5, self.rect.height + 10))

wave_number = 1
enemies = pygame.sprite.Group()
princess_active = False
princess = None
cheat_used = False  # <== TRACK CHEAT

def spawn_wave(n):
    global princess_active, princess
    if n < 5:
        for _ in range(n):
            speed = 2 + (wave_number - 1) * 0.5
            plat = random.choice(platforms)
            x = random.randint(plat.x, plat.x + plat.width - 40)
            y = plat.top - 40
            enemies.add(Enemy(x, y, speed))
    elif n == 5:
        princess_active = True
        princess = Princess(1500, 550)
       
       

spawn_wave(wave_number)
player = Player()

running = True
while running:
    clock.tick(FPS)
    keys = pygame.key.get_pressed()

    for event in pygame.event.get():
        if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1 and player.state == "alive":
            bullet_speed = 10 if player.facing_right else -10
            bullets.append({"rect": pygame.Rect(player.rect.centerx, player.rect.centery, 10, 5), "speed": bullet_speed})
        if event.type == pygame.KEYDOWN and event.key == pygame.K_e and player.grenade_cooldown == 0 and player.state == "alive":
            grenade_speed = 7 if player.facing_right else -7
            grenades.append({
                "rect": pygame.Rect(player.rect.centerx, player.rect.centery, 12, 12),
                "vx": grenade_speed,
                "vy": -10,
                "timer": 60
            })
            player.grenade_cooldown = 90

        # === CHEAT KEY: Press K to skip to Wave 5 ===
        if event.type == pygame.KEYDOWN and event.key == pygame.K_k:
            wave_number = 5
            enemies.empty()
            spawn_wave(wave_number)
            cheat_used = True

    for cloud in clouds:
        cloud.update()

    player.update(keys)
    enemies.update()

    if not princess_active and len(enemies) == 0 and player.state == "alive":
        wave_number += 1
        spawn_wave(wave_number)

    if player.state == "alive":
        for enemy in enemies:
            if player.rect.colliderect(enemy.rect):
                player.start_dying()
                break

    if player.state == "alive":
        for bullet in bullets[:]:
            bullet["rect"].x += bullet["speed"]
            for enemy in enemies:
                if bullet["rect"].colliderect(enemy.rect):
                    enemies.remove(enemy)
                    if bullet in bullets:
                        bullets.remove(bullet)
                    break
            if bullet["rect"].right < 0 or bullet["rect"].left > WORLD_WIDTH:
                if bullet in bullets:
                    bullets.remove(bullet)

    for grenade in grenades[:]:
        grenade["vy"] += gravity
        grenade["rect"].x += grenade["vx"]
        grenade["rect"].y += grenade["vy"]
        grenade["timer"] -= 1

        hit_ground = False
        for plat in platforms:
            if grenade["rect"].colliderect(plat):
                hit_ground = True
                break

        if grenade["timer"] <= 0 or hit_ground:
            explosion_center = grenade["rect"].center
            for enemy in enemies.copy():
                if abs(enemy.rect.centerx - explosion_center[1]) < grenade_radius and abs(enemy.rect.centery - explosion_center[1]) < grenade_radius:
                    enemies.remove(enemy)
            grenades.remove(grenade)

    camera_x = max(0, min(player.rect.centerx - WIDTH // 2, WORLD_WIDTH - WIDTH))

    screen.blit(background_img, (-camera_x, 0))
    for cloud in clouds:
        cloud.draw(screen, camera_x)

    for plat in platforms:
        pygame.draw.rect(screen, GREEN, pygame.Rect(plat.x - camera_x, plat.y, plat.width, plat.height))

    player.draw(screen, camera_x)
    for enemy in enemies:
        enemy.draw(screen, camera_x)
    for bullet in bullets:
        pygame.draw.rect(screen, RED, pygame.Rect(bullet["rect"].x - camera_x, bullet["rect"].y, 10, 5))
    for grenade in grenades:
        pygame.draw.circle(screen, (200, 200, 0), (grenade["rect"].x - camera_x, grenade["rect"].y), 6)

    if princess_active:
        princess.draw(screen, camera_x)
        if player.rect.colliderect(princess.rect):
            font = pygame.font.SysFont(None, 72)
            text = font.render("You saved the princess!", True, WHITE)
            screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 - text.get_height() // 2))

    font = pygame.font.SysFont(None, 36)
    wave_text = font.render(f"Wave: {wave_number}", True, WHITE)
    screen.blit(wave_text, (10, 10))

    if cheat_used:
        cheat_font = pygame.font.SysFont(None, 24)
        cheat_msg = cheat_font.render("Cheat activated: Skipped to Wave 5", True, YELLOW)
        screen.blit(cheat_msg, (10, 40))

    if player.state == "dead":
        player.draw_game_over(screen)
        player.game_over_timer -= 1
        if player.game_over_timer <= 0:
            running = False

    pygame.display.update()

pygame.quit()
sys.exit()
